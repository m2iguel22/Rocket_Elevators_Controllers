SEQUENCE "main"
  CALL initS

SEQUENCE Init System USING Battery 
  
    SET battery status TO Operational Or NotOperational
    SET column1 to floor 1 and -6 TO 1 
    SET column1 elevator to 3
    SET column2 to Floor 1 and 1 TO 20
    SET column2 elevator to 3
    SET column3 to floor 1 and 21 TO 40
    SET column3 elevator to 3
    SET column4 to floor 1 and 41 TO 60       
    SET column4 elevator to 3

    SET columns to column_1, column_2, column_3, column_4
    SET Elevator starting position IS 1
    SET Elevator status TO IDLE
    SET Elevator Doors TO CLOSE
    
END SEQUENCE

SEQUENCE CallElevator USING Direction AND Floor
    CALL ActiveOutsideButton WITH Direction AND Floor
    CALL FindBestElevator WITH Direction, Floor RETURNING Elevator 
    CALL DispatchElevator WITH Elevator AND Floor  
END SEQUENCE

SEQUENCE InsideElevatorButton USING Direction, Floor AND RequestElevator
    CALL ActiveInsideButton WITH Direction AND Floor
     SET Button Active
ENDSEQUENCE

SEQUENCE DisableInsideElevatorButton USING Direction AND Floor  
    SET Button Disable 
ENDSEQUENCE

SEQUENCE FindBestElevator USING Elevator AND Floor
    CALL GetBestElevator WITH Direction AND Floor RETURNING Elevator
    CALL RequestElevator WITH Elevator AND  Floor
END SEQUENCE

SEQUENCE ActiveOutsideButton USING Direction AND Floor  
    SET button Active 
END SEQUENCE

SEQUENCE DesableOutsideButton USING Direction AND Floor   
    SET button Desable 
END SEQUENCE

SEQUENCE FindInsideElevatorButton USING Direction AND Floor
    FOR EACH Button IN InsideElevatorButton
        IF Floor = ButtonFloor AND Direction = ButtonDirection THEN
            RETURN button 
        END IF
    END FOR 
END SEQUENCE 

SEQUENCE GetBestElevator USING Direction, FLOOR  
   CASE Floor

        Floor =< 1 AND FLOOR >= -6:
            RETURN Elevator FROM CALL DispatchElevator (Column1) RETURNING Elevator AND Direction
     

   `    Floor > 1 AND Floor < 20:
            RETURN Elevator FROM CALL DispatchElevator (Column2, floor) RETURNING Elevator AND Direction


        Floor > 20 AND Floor < 40: 
            RETURN Elevator FROM CALL DispatchElevator (Column3) RETURNING Elevator AND Direction 
   
        
        Floor > 40 ANd Floor < 60:
            RETURN Elevator FROM CALL DispatchElevator (Column4) RETURNING Elevator AND Direction

   END CASE
END SEQUENCE

SEQUENCE DispatchElevator USING Column, Direction AND Floor 
    INIT BestMovingElevator = empty;
    INIT BestMovingTravel = empty;
    INIT BestIdleElevator = empty;
    INIT BestIdleTravel = empty;
    INIT BestOtherElevator = empty;
    INIT BestOtherTravels = empty;
    INIT BestElevator = empty;

    set MovingElevators EQUAL COMPUTE get all elevators that are Moving in column 
    set othersElevators 

    FOR EACH ELEVATOR IN COLUMN
        SET travel EQUAL CALL GetTravel WITH Elevator, Floor
        IF BestMovingTravel IS empty OR Travel < BestMovingTravel AND ElevatorDirection IS Direction  THEN
            SET BestMovingTravels EQUAL travel
            SET BestMovingElevator EQUAL Eelevator
        ELSE IF  Elevator is Idle AND ( BestIdleTravel IS empty OR Travel < BestIdleTravel )THEN
            SET BestIdleTravels EQUAL travel
            SET BestIdleElevator EQUAL Elevator
        ELSE IF BestTravel IS empty OR Travel < BestMovingTravel THEN
                SET BestOtherTravels EQUAL Travel
                SET BestOtherElevator EQUAL Elevator
            
        ENDIF
    ENDFOR

    IF BestMovingElevator IS true THEN 
        CALL AddFloorToElevatorFloorList WITH BestMovingElevator, Floor
    ELSE CALL AddFloorToElevatorFloorList WITH BestOtherElevator, Floor
ENDSEQUENCE


SEQUENCE GetTravel USING Elevator, Floor AND Direction
    RETURN COMPUTE ASOLUTE( floor - ElevatorCurrentFloor)
ENDSEQUENCE


SEQUENCE RequestElevator USING Elevator AND RequestedFloor
    ADD RequestedFloor TO ColumnFloorList
     CALL ColumnSortFloorList WITH ColumnFloorlist AND Direction RETURNING ColumnSortedFloorList       
     SET ColumnFloorList TO ColumnSortedFloorList
     CALL OperateElevator WITH Elevator
END SEQUENCE

SEQUENCE ColumnSortFloorList USING Floorlist AND Direction
   SORT ColumnFloorList BY Direction THEN RETURN ColumnSortedFloorlist
END SEQUENCE

SEQUENCE OperateElevator USING Elevator    
CALL ShowFloor With ElevatorCurrentFLoor AND Direction                         
 WHILE Elevator SortedFloorList IS NOT Empty                               
    READ RequestedFloor From SortedFloorList 
     IF ElevatorFloor IS RequestedFloor THEN 
      CALL OpenDoor WITH Elevator
    ELSE IF ElevatorFloor > RequestedFloor 
      CALL MoveDown  WITH Elevator AND RequestedFloor
    ELSE IF ElevatorFloor < RequestedFloor
      CALL MoveUp WITH Elevator AND RequestedFloor
    END IF 
  END WHILE 
  CALL PeekHour WITH Elevator 
END SEQUENCE 

SEQUENCE MovingUp USING RequestElevator AND Elevator         
    REPEAT  
        IF CurrentFloors IS NOT EQUAL TO RequestFloor
            SET Elevator Status TO Moving Up
            SET Elevator CurrentFloor EQUAL CurrentFloor + 1 
        END IF
    UNTIL CurrentFloor EQUALS RequestFloor

ENDSEQUENCE


SEQUENCE MovingDown USING RequestElevator AND Elevator         
    REPEAT  
        IF CurrentFloors IS NOT EQUAL TO RequestFloor
         SET Elevator Status TO Moving Down
          SET CurrentFloor EQUAL CurrentFloor - 1 
        ENDIF  
    UNTIL CurrentFloor EQUALS RequestFloor
      
ENDSEQUENCE


SEQUENCE OpenDoor USING Elevator
    REPEAT 
        OpenDoor 
     INIT Timer TO 9000 ms 
    UNTIL Door NOT Obstructed 
     CALL DesableOutsideButton
     CALL CloseDoor WITH Elevator
END SEQUENCE

SEQUENCE CloseDoor USING Elevator
    IF Door IS Closing AND NOT Obstructed AND NOT Overweight 
    THEN
        CALL RequestElevator                                    
    ELSE 
        CALL OpenDoor WITH Elevatorwq
    END IF
END SEQUENCE

SEQUENCE Obstructed USING Elevator
   READ Captor FROM Door
   IF Obstructed 
      RETURN TRUE 
   ELSE RETURN FALSE 
   END IF 
END SEQUENCE 

SEQUENCE Overweight USING Elevator
   READ Weight FROM Balance 
   IF Weight > Max Weight THEN
     RETURN TRUE 
   ELSE RETURN FALSE
   END IF 
END SEQUENCE

SEQUENCE ShowFloor USING Floor AND Direction
WHILE Battery Status is Operational              
SHOW ElevatorFloor ON Board 
SHOW Direction ON Board
END WHILE
END SEQUENCE 

SEQUENCE PeekHour USING Elevator 
     COMPUTE Middle FROM Column
     COMPUTE MaxFloor FROM Column
     IF 14 > TimeOfDay > 11 THEN 
      CALL RequestElevator WITH Elevator AND Middle Floor
     IF 20 > TimeOfDay > 16 THEN 
      CALL RequestElevator WITH Elevator AND Max Floor
     ELSE 
      CALL RequestElevator (Elevator, 1)
END SEQUENCE 

